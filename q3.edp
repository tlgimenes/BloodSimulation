//---------------------------------------------------------------------//
//
//  Simulation of the linear Stokes equation in fix 3D form 
//
//  Authors: Chongmo LIU
//           Tiago Lobato Gimenes
//
//---------------------------------------------------------------------//

//---------------------------------------------------------------------//
// General definitions for the whole program
//---------------------------------------------------------------------//

real r0 = 0, r1 = 0.06; // Radius of the cylinder
real z0 = 0, z1 = 0.3;   // Lenght of the cylinder
real radius = r1/2;        // Radius of the anomaly
real flat = 1./3;        // Percentage of the domaine that is flat
int n=50;               // Number of elements in the mesh

// Borders definitions
border a(t=r1,r0){x=0; y=t; label=4;};
border b(t=z0,z1){x=t; y=0; label=1;};
border e(t=r0,r1){x=z1; y=t; label=2;};
border f(t=z1,z1-flat*z1){x=t; y=r1;label=3;};
border g(t=0,1){x=(3./2)*flat*z1+flat*z1*cos(pi*t)/2; y=r1+radius*sin(pi*t); label=3;};
border h(t=z1*flat,0){x=t; y=r1; label=3;};

// Physical variables definitions
real nu=0.01;

//---------------------------------------------------------------------//
// Definitions for the problem without the transpose matrix
//---------------------------------------------------------------------//

// Mesh creation
mesh Th = buildmesh ( a(n)+b(n)+e(n)+f(n)+g(n)+h(n));

// Function spaces creation
fespace Xh(Th, P2);
fespace Mh(Th, P1);

// Definition of the problems variables
Xh u2, v2;
Xh u1, v1;
Mh p,q; 

// Problem 
problem Stokes(u1, u2, p, v1, v2, q, solver=Crout)=
int2d(Th)(y*nu*(dy(u2)*dy(v2) + dx(u2)*dx(v2) + u2/y*v2/y + dy(u1)*dy(v1) + dx(u1)*dx(v1))
    -y*p*q*(0.000001)-y*p*(dy(v2)+v2/y+dx(v1))+y*q*(dy(u2)+u2/y+dx(u1)))
    +on(3, u1=0,u2=0)
    +on(4, u1=-y^2/(2*nu)+r1^2/(2*nu), u2=0);

//---------------------------------------------------------------------//
// Definitions for the problem with the transpose matrix
//---------------------------------------------------------------------//

// Create a new mesh
mesh Th2 = buildmesh ( a(n)+b(n)+e(n)+f(n)+g(n)+h(n));

// Function spaces creation
fespace Xh2(Th2, P2);
fespace Mh2(Th2, P1);

// Definition of the problems variables
Xh2 u22, v22;
Xh2 u12, v12;
Mh2 p2,q2; 

// Problem
problem Stokes2(u12, u22, p2, v12, v22, q2, solver=Crout)=
    int2d(Th2)((nu*(dy(u22)*dy(v22)+dx(u22)*dx(v22) + u22*v22/(y*y) + dy(u12)*dy(v12) + dx(u12)*dx(v12) +
                   dy(u22)*dy(v22)+dy(u12)*dx(v22) + u22*v22/(y*y) + dx(u22)*dy(v12) + dx(u12)*dx(v12))
    -p2*q2*(0.000001) -p2*(dy(v22)+v22/y+dx(v12)) + q2*(dy(u22)+u22/y+dx(u12)))*y)
    +on(3, u12=0,u22=0)
    +on(4, u12=-(y)^2/(2*nu)+(r1)^2/(2*nu), u22=0);

//---------------------------------------------------------------------//
// Execution of the program without the transpose matrix
//---------------------------------------------------------------------//

// Runs the problem and plots it
Stokes; plot([u1, u2],p);

// Creates an adaptative mesh
Th = adaptmesh(Th, p, err=1.e-3);

// Runs the problem and plots it
Stokes; plot([u1,u2], p);

//---------------------------------------------------------------------//
// Execution of the program with the transpose matrix
//---------------------------------------------------------------------//

// Runs the problem and plots it
Stokes2; plot([u12, u22],p2);

// Creates an adaptative mesh
Th2 = adaptmesh(Th2, p2, err=1.e-3);

// Runs the problem and plots it
Stokes2; plot([u12,u22], p2);
