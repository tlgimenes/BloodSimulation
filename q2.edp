//---------------------------------------------------------------------//
//
//  Simulation of the linear Stokes equation in fix cylinder 
//
//  Authors: Chongmo LIU
//           Tiago Lobato Gimenes
//
//---------------------------------------------------------------------//

//---------------------------------------------------------------------//
// General definitions for the whole program
//---------------------------------------------------------------------//

// Boundaries definitions
real x0=0, x1=0.1;
real r0=0, r1=0.006;

// Density of the mesh definitions
int n=11, m=33;

// Physical Constants definitions
real nu=0.01;

//---------------------------------------------------------------------//
// Definitions for the problem without the transpose matrix
//---------------------------------------------------------------------//

// Mesh creation
mesh Th=square(n,m, [x0+(x1-x0)*x, r0+(r1-r0)*y]);

// Function spaces creation
fespace Xh(Th, P2);
fespace Mh(Th, P1);

// Definition of the problem's variable
Xh u2, v2;
Xh u1, v1;
Mh p,q;

// Solves the linear Stokes formula
problem Stokes(u1, u2, p, v1, v2, q, solver=Crout)=
    int2d(Th)((nu*(dy(u2)*dy(v2)+dx(u2)*dx(v2) + u2*v2/(y*y) + dy(u1)*dy(v1) + dx(u1)*dx(v1))
    -p*q*(0.000001) -p*(dy(v2)+v2/y+dx(v1)) + q*(dy(u2)+u2/y+dx(u1)))*y)
    +on(3, u1=0,u2=0)
    +on(4, u1=-(y)^2/(2*nu)+(r1)^2/(2*nu), u2=0);

//---------------------------------------------------------------------//
// Definitions for the problem with the transpose matrix
//---------------------------------------------------------------------//

// Mesh creation
mesh Th2=square(n,m, [x0+(x1-x0)*x, r0+(r1-r0)*y]);

// Function spaces creation
fespace Xh2(Th2, P2);
fespace Mh2(Th2, P1);

// Definition of the problem's variable
Xh2 u22, v22;
Xh2 u12, v12;
Mh2 p2,q2;

// Solves the linear Stokes formula
problem Stokes2(u12, u22, p2, v12, v22, q2, solver=Crout)=
    int2d(Th2)((nu*(dy(u22)*dy(v22)+dx(u22)*dx(v22) + u22*v22/(y*y) + dy(u12)*dy(v12) + dx(u12)*dx(v12) +
                   dy(u22)*dy(v22)+dy(u12)*dx(v22) + u22*v22/(y*y) + dx(u22)*dy(v12) + dx(u12)*dx(v12))
    -p2*q2*(0.000001) -p2*(dy(v22)+v22/y+dx(v12)) + q2*(dy(u22)+u22/y+dx(u12)))*y)
    +on(3, u12=0,u22=0)
    +on(4, u12=-(y)^2/(2*nu)+(r1)^2/(2*nu), u22=0);

//---------------------------------------------------------------------//
// Execution of the program without the transpose matrix
//---------------------------------------------------------------------//

// Plots for the first time
Stokes; plot(p, [u1,u2]);

// Adapts the mesh to better calculation
Th = adaptmesh(Th, p, err=1.e-3);

// Plots the solution for the second time
Stokes; plot(p,[u1, u2]);

//---------------------------------------------------------------------//
// Execution of the program with the transpose matrix
//---------------------------------------------------------------------//

// Plots for the first time
Stokes2; plot(p2, [u12,u22]);

// Adapts the mesh to better calculation
Th2 = adaptmesh(Th2, p2, err=1.e-3);

// Plots the solution for the second time
Stokes2; plot(p2,[u12, u22]);
